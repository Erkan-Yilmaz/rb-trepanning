#!/usr/bin/env ruby
# Invoke debugger from the command line. 

require_relative %w(.. rbdbgr)

module Rbdbgr
  def debug_program(program_to_debug)
    # Make sure Ruby script syntax checks okay.
    # Otherwise we get a load message that looks like rbdbgr has 
    # a problem. 
    output = `ruby -c #{program_to_debug} 2>&1`
    if $?.exitstatus != 0 and RUBY_PLATFORM !~ /mswin/
      puts output
      exit $?.exitstatus 
    end
    # print "\032\032starting\n" if Debugger.annotate and Debugger.annotate > 2

    dc = Debugger.new(:restart_argv => [File.expand_path($0)])
    dc.debugger do
      load program_to_debug
    end
  end

  # Do a shell-like path lookup for prog_script and return the results.
  # If we can't find anything return prog_script.
  def whence_file(prog_script)
    if prog_script.index(File::SEPARATOR)
      # Don't search since this name has path separator components
      return prog_script
    end
    for dirname in ENV['PATH'].split(File::PATH_SEPARATOR) do
      prog_script_try = File.join(dirname, prog_script)
      return prog_script_try if File.exist?(prog_script_try)
    end
    # Failure
    return prog_script
  end
end

if __FILE__ == $0
  include Rbdbgr

  # One way to get local variables is to create a block run once.
  1.times do 
    | ; rdebug_path, program_to_debug |
    if ARGV.empty?
      STDERR.puts 'Sorry - for now you must specify a Ruby script to debug.'
      exit(-1)
    end
    
    Debugger::ARGV = ARGV.clone

    rdebug_path = File.expand_path($0)
    if RUBY_PLATFORM =~ /mswin/
      rdebug_path += '.cmd' unless rdebug_path =~ /\.cmd$/i
    end

    # FIXME: do we need to test defined? 
    Debugger::RDEBUG_SCRIPT = rdebug_path
    Debugger::RDEBUG_FILE = __FILE__
    Debugger::INITIAL_DIR = Dir.pwd

    program_to_debug = ARGV.shift
    program_to_debug = whence_file(program_to_debug) unless 
      File.exist?(program_to_debug)
    Debugger::PROG_SCRIPT = program_to_debug
    debug_program(File.expand_path(program_to_debug))
  end
end
