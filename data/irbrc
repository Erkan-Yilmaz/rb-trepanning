# We use this as the default startup file for irb inside rbdbgr
# Down the line we will have a way for folks to add/override this
# with their own file.
IRB.conf[:PROMPT_MODE] = :SIMPLE
IRB.conf[:PROMPT][:SIMPLE] = 
    {:PROMPT_C=>"rbdbgr ?> ",
     :PROMPT_I=>"rbdbgr >> ",
     :PROMPT_N=>"rbdbgr >> ",
     :PROMPT_S=>nil,
     :RETURN=>"=> %s\n"}

# Using dbgr to issue a debugger statement inside irb:
#  dbgr %w(info program)
#  dbgr 'info program'  # also works
# But...
#  dbgr info program    # wrong!
# 
puts "You are in a rbdbgr session. You should have access to program scope."
puts "'dbgr', 'step', 'n', 'q', 'cont' commands have been added."

if defined?($rbdbgr) && $rbdbgr
   puts 'You should have access to debugger state via global variable $rbdbgr'
end
if defined?($rbdbgr_frame) && $rbdbgr_frame
   puts 'You should have access to the program frame via global variable $rbdbgr_frame'
end
if defined?($rbdbgr_cmdproc) && $rbdbgr_cmdproc
   puts 'You should have access to the command processor via global variable $rbdbgr_cmdproc'
end

# Monkeypatch to save the current IRB statement to be run.
# Possibly not needed.
class IRB::WorkSpace
  def evaluate(context, statements, file = __FILE__, line = __LINE__)
    $rbdbgr_irb_statements = statements
    eval(statements, @binding, file, line)
  end
end

