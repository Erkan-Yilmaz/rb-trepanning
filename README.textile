A modular, testable debugger for Ruby 1.9.2. A total rewrite of _ruby-debug_.

__In order to use this debugger, you'll need a patched Ruby 1.9.2 and some additional packages. See the "installation instructions.":http://wiki.github.com/rocky/rbdbgr/how-to-install-rbdbgr__

Right now this debugger is beta code.

There is a "google group mailing list:http://groups.google.com/group/ruby-debugger" for this debugger.

If rbdbgr is installed, here is how to run:

bc.  rbdbgr ruby-program [program]

If your program needs options of its own:

bc.  rbdbgr -- ruby-program [program args...]

If you want to run from the source tree you can do that too:

bc.  cd place-where-rbdbgr-is-installed:
 ./bin/rbdbgr -- ruby-program [program args...]

Running from inside _irb_:

bc.  require 'rbdbgr' 
 Debugger.debug { your code }

The return value from Debugger is the return value of the block, i.e. the final value in the block.

You can run the same thing inside your Ruby program, but probably you don't want to give a block. Instead, you may want to have debugging start on the next statement in the code:

bc.  require 'rbdbgr' 
 Debugger.debug # Don't stop here...
 work # but stop here.

or if you haven't mucked around with $0 and ARGV, you might try:

bc.  Debugger.debug(:set_restart=>true)

which informs the debugger on how to restart the program (via the restart command) using the values of ARGV and $0 at the time Debugger.debug was called.

The above is really shorthand for something like:

bc.  $rbdbgr = Debugger.new(:set_restart=>true) 
 $rbdbgr.debugger

The global variable $rbdbgr set holds debugger settings, such as "autolist" or "autoeval" settings and breakpoint information.

Due to the line-event orientation in ruby-debug, it occasionally it was convenient to add a synchronous stop in your program. I don't think that will as necessary here, but if you do call to the debugger at the point of the call rather than the subsequent stopping point, set opts[:immediate] to true. Example:

bc.  # ... work, work, work 
 mydbg.debugger(:immediate=>true) # enter debugger here 
 # ... work, work, work

